#!/usr/bin/env python3

######################################################################
# FIXME: some open source license
######################################################################

import os
import tkinter as tk

from resources import verdi_interface as verdi
from resources import view
from resources import model
from resources import config

class Controller():
    """Code that stitches the model and view classes together"""

    def __init__(self, parent):

        # Main view.
        main_view_callback = self.view_callback_handler
        self.main_view = view.MainView(parent=parent,
                                       callback=main_view_callback,
                                       cleanup=self.cleanup)
        
        # Determine the Verdi instance with which to interact.
        self.verdi = verdi.Interface()
        candidates = self.verdi.get_candidates_for_wave_tk_name()
        # Remove the name of the parent since it may have
        # 'verdi' in its text.
        candidates.remove(self.main_view.get_name())
        assert(len(candidates) > 0), 'No Verdi app candidates found.'

        if len(candidates) == 1:
            # Only a single candidate so must be the correct one.
            self.verdi.set_wave_tk_name(candidates[0])
        else:
            # More than one candidate so use GUI to help user choose.
            prompt = 'Choose a Verdi instance:'
            dialog = view.RadioButtonDialog(title='Wave Selection',
                                            prompt=prompt,
                                            candidates=candidates,
                                            parent=parent)
            self.verdi.set_wave_tk_name(dialog.result)

        # Now that the Verdi app is known...
        # ...register the callback for when the cursor changes.
        self.verdi.add_time_change_work(self.verdi_callback_handler)
        self.verdi.register_time_change_callback()
        # ...and update the label name.
        self.main_view.update_wave_app(self.verdi.get_wave_tk_name())
        # ...and get the current cursor value and display the time.
        time_at_cursor = self.verdi.get_time_at_cursor()
        self.main_view.update_cursor_time(time_at_cursor)

        wave_filename = self.verdi.get_wave_filename()
        (file_root, file_name) = os.path.split(wave_filename)
        listing = file_root + '/' + config.listing
        self.code_model = model.CodeModel(listing=listing)

        labeled_code = self.code_model.get_labeled_code()
        self.main_view.apply_labeled_code(labeled_code)

        # Now that the code model and view have been created,
        # update the view to highlight the current instruction.
        self.recenter()

    def view_callback_handler(self, reason):
        legal_reasons = {'Prev', 'Next', 'Center'}
        assert(reason in legal_reasons), 'Unrecognized reason.'
        if reason is 'Center':
            self.recenter()
        else:
            self.verdi.search_signal_change(signal=config.ip_signal,
                                            direction=reason)

    def recenter(self):
        ip_value = self.verdi.get_sig_value_by_time(config.ip_signal)
        line = self.code_model.get_line_from_instr_ptr(ip_value)
        self.main_view.recenter(line)

    def verdi_callback_handler(self, time):
        self.main_view.update_cursor_time(time)
        self.recenter()

    def cleanup(self):
        self.verdi.destroy()
        self.main_view.destroy()

root = tk.Tk(className=config.class_name)

# Keep this window hidden until we know how to draw it.
root.withdraw()

controller = Controller(root)

# Display the main window now that it has been properly configured.
root.deiconify()

root.mainloop()
